use crate::contract::ContractError;
use hyle_sdk::{Blob, BlobIndex, ContractInput};
use serde::{Deserialize, Serialize};

fn extract_context(input: &[u8]) -> Result<ReclaimContext, Box<dyn std::error::Error>> {
    let proof: ReclaimProof = serde_json::from_slice(input)?;
    let context: ReclaimContext = serde_json::from_str(&proof.claim_data.context)?;

    Ok(context)
}

pub fn process_reclaim_input(input: &ContractInput) -> Result<bool, ContractError> {
    // First we decode the blob of this contract to get the index of the reclaim blob

    let contract_blob: &Blob = input.blobs.get(input.index.0).expect("could not get index");
    let contract_data: ReclaimVerifyContractData =
        serde_json::from_slice(&contract_blob.data.0).unwrap();

    let contract_params: ReclaimExtractedParameters =
        serde_json::from_str(&contract_data.reclaim_contract_params)
            .expect("could not extract params from contract");

    // Then decode the relaim blob
    let proof_blob: &Blob = input
        .blobs
        .get(contract_data.reclaim_contract_index.0)
        .expect("could not get index");

    let proof_context = extract_context(&proof_blob.data.0).expect("could not extract context");

    // We check if the blob commited to this contract are matching the blob generated by reclaim
    Ok(proof_context.extracted_parameters == contract_params)
}

// Reclaim Utils
#[derive(Serialize, Deserialize)]
pub struct ReclaimVerifyContractData {
    reclaim_contract_index: BlobIndex,
    reclaim_contract_params: String,
}

#[derive(Debug, Serialize, Deserialize)]
struct ReclaimClaimData {
    context: String,
    epoch: i64,
    identifier: String,
    owner: String,
    parameters: String,
    provider: String,
    #[serde(rename = "timestampS")]
    timestamp_s: i64,
}

#[derive(Debug, Serialize, Deserialize, PartialEq)]
struct ReclaimExtractedParameters {
    #[serde(rename = "URL_PARAMS_1")]
    url_params_1: String,
    #[serde(rename = "URL_PARAMS_2")]
    url_params_2: String,
    #[serde(rename = "URL_PARAMS_3")]
    url_params_3: String,
    #[serde(rename = "URL_PARAMS_GRD")]
    url_params_grd: String,
    created_at: String,
    full_text: String,
    screen_name: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct ReclaimContext {
    #[serde(rename = "contextAddress")]
    context_address: String,
    #[serde(rename = "contextMessage")]
    context_message: String,
    #[serde(rename = "extractedParameters")]
    extracted_parameters: ReclaimExtractedParameters,
    #[serde(rename = "providerHash")]
    provider_hash: String,
}

#[derive(Debug, Serialize, Deserialize)]
struct ReclaimProof {
    identifier: String,
    #[serde(rename = "claimData")]
    claim_data: ReclaimClaimData,
    signatures: Vec<String>,
    witnesses: Vec<serde_json::Value>,
    #[serde(rename = "publicData")]
    public_data: serde_json::Value,
}
